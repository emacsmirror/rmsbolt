#+TITLE: RMSbolt User Manual

#+AUTHOR: Jay Kamat
#+EMAIL: jaygkamat@gmail.com
#+DATE: <2018-10-27 Sat>
#+LANGUAGE: en

#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: RMSbolt: (rmsbolt).
#+TEXINFO_DIR_DESC: Viewing disassembly in Emacs with RMSbolt.
#+BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-version-strings

#+OPTIONS: H:4 num:3 toc:2

RMSbolt is a compiler output viewer in Emacs.

RMSbolt tries to make it easy to see what your compiler is doing. It does this
by showing you the assembly output of a given source code file. It also
highlights which source code a given assembly block corresponds to, and vice
versa. It supports more types of languages than any previous tool of its kind.

* Installation
A [[https://melpa.org/#/rmsbolt][melpa package]] is available for rmsbolt.

No dependencies are required, other than an Emacs newer than 25.1

** Quelpa

This is a quelpa formula for RMSbolt

#+BEGIN_SRC emacs-lisp
  (quelpa '(rmsbolt
            :files (:defaults "starters")
            :fetcher gitlab
            :repo "jgkamat/rmsbolt"))
#+END_SRC

* Running
Once installed, use the ~rmsbolt-starter~ command to generate starter files, or
enable ~rmsbolt-mode~ in a supported language. Then run ~rmsbolt-compile~ or use
the default ~C-c C-c~ binding to pop open a disassembly buffer. After the first
run, the buffer should automatically update.
* Configuring

RMSbolt is primarily configured with Emacs local variables. This lets you change
compiler and rmsbolt options simply by editing a local variable block. The
starter files have this block with some common settings:

#+BEGIN_SRC c
  // Local Variables:
  // rmsbolt-command: "gcc -O0"
  // rmsbolt-disassemble: nil
  // End:
#+END_SRC

*Note*: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][the Local Variable block must be 3000 characters from the end of the
file to work]]. Any method of setting buffer-local variables will work though.

** Option List

- Local Option: rmsbolt-command

  Determines the prefix of the compilation command to use. Use this to switch
  between compilers or pass flags to your compiler.

- Local Option: rmsbolt-default-directory

  Determines the default directory to compile from, which is useful if you are
  building with a build-system.

- Local Option: rmsbolt-disassemble

  Disassemble from a compiled binary with objdump, if supported.

- Local Option: rmsbolt-filter-directives

  Whether to filter unused assembly directives out of final output.

- Local Option: rmsbolt-filter-labels

  Whether to filter unused labels from final output

- Local Option: rmsbolt-filter-comment-only

  Whether to filter lines that are comment-only.

- Local Option: rmsbolt-asm-format

  Which output format to use. Supported values vary between languages. In
  general, ~"intel"~ and ~"att"~ are supported. ~nil~ means to use the tool's
  defaults. Other values may work as well, depending on your compiler.

- Local Option: rmsbolt-demangle

  Demangle the output, if supported.

- Local Option: rmsbolt-ignore-binary-limit

  Ignore the binary size limit for disassembly. This will almost certainly cause
  Emacs to hang during large processing.

- Local Option: rmsbolt-demangle

  Enable or disable demangling, if the language supports it.

* Languages
This section covers languages-specific quirks and features.

** C/C++

C/C++ is the primary focus of support, and will get new features and support
first.

Demangling is enabled if ~c++filt~ is available on the path.

** OCaml

OCaml disassembly is supported through both ~ocamlopt~ and through disassembly
with objdump.

** Rust

Demangling is done with ~rustfilt~ if it is on the path.

** Haskell

Demangling is done with the compiler-explorer demangler, named
to ~haskell-demangler~ and placed on the path.

** Python

Support for viewing bytecode only. Python [[https://bugs.python.org/issue2506][doesn't have many options]], so most
tweakables will not work. Python 3.7 is required for recursion into functions,
otherwise only top level code will be shown. Python 2 is completely unsupported.

** Java

Parses the output of ~javap~ to get debug information and disassembly.

** PHP
Requires the [[https://github.com/derickr/vld][vld php extension]] to display PHP opcodes. Without that, you will
not get any output.

If you use hack (denoted by ~<hh?~ at the top of your file), you will not get
source->asm matching or filtering.

** Pony

Filtering on pony is not as effective as pony asm includes references to
machine-generated functions. This means the output will be slower to generate,
similar to disassembly in other languages. The pony file being viewed will be
copied into it's own directory, making it much harder to view non-toy examples.

** D

Assembly is generated through the ~ldc~ tool, and demangling is provided by
~ddemangler~.

Please report bugs if matching does not work for you, as D's file format for
designating files is a little different.

** Swift

Swift support is a little bit non-standard. Since swift is used primarily on
apple devices, the default value for ~swiftc~ and ~swift-demangle~ is populated
from the active toolchain in addition to the path. Overriding the compile
command will not currently search the toolchain for the compiler (only the path).

~swift-demangle~ is used for demangling support if available.

** Emacs Lisp

No support for source->asm matching, filtering, or automatic recompile.

Emacs 26 or the ~cl-print~ package are required.

** Common Lisp

No support for source->asm matching or filtering. Only ~sbcl~ and ~clisp~
supported at the moment, with ~sbcl~ giving much better results.

** Zig

Assembly is generated through the ~zig~ compiler. Due to large binary sizes,
disassembly is discouraged.

Zig embeds a panic handler which inflates the size of binaries. In order to
reduce this to a manageable level, you can add the following snippet to your
file:

#+BEGIN_SRC zig
  pub fn panic(msg: []const u8, error_return_trace: ?*@import("builtin").StackTrace) noreturn {
      while (true) {
      }
  }
#+END_SRC

** Go

Uses Go's objdump tool to produce viewing-only bytecode. Go must be on the path.

** Nim

Builds into object files into a temporary ~nim-cache~ directory generated by
rmsbolt, which will then be copied and dissassembled.
C++ backend is also possible to either with ~nim cpp~ or ~nim c
--passC:-std=gnu++14~ and uses ~c++filt~ demangler.

Use the ~{.exportc.}~ pragma for at least the main procedure that will be dissassembled.

* Integrations
This section covers integrations that RMSbolt provides, which make it easier to
use RMSbolt with complex projects with many dependencies.

Integrations are very new, and as such, may be highly buggy and require extra
work to debug.

Most integrations only take effect when ~rmsbolt-command~ and
~rmsbolt-default-directory~ are nil! Setting either of these will disable any
attempt at using the integration system.

** C/C++

C/C++ will look for a ~compile_commands.json~ file in any directory higher than
the source file. Once it finds one, it will parse the file trying to find a
match for the current file, and if it finds one, it will compile using the flags
present there. Many files (like headers) are not present in
~compile_commands.json~ and will not work (at this time).

Because the compilation commands in ~compile_commands.json~ assume the files are
compiled in order, please make sure to fully compile the project before
beginning, otherwise, you could see compiler errors.

In order to transform the given file, some flags are removed. This is the most
brittle part of the current system, and could cause compile errors.

On projects with a lot of imports, the resulting assembly file might be large,
which may cause Emacs to hang.

*** QuickStart Guide
1. Generate a ~compile_commands.json~ file, and ensure it is in a domineering directory.
   #+BEGIN_SRC sh
   cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
   #+END_SRC
2. Compile the project completely. If you pass flags to your build system, make
   sure they are passed when generating ~compile_commands.json~ as well.
3. Open the file in question, and enable ~rmsbolt-mode~.
4. Run ~rmsbolt-compile~.

* Developing

These are some tips which will help people working on developing or customizing RMSbolt.

** Adding a Language

Adding support for a new language is fairly easy. The closer it is to existing
compilers, the easier it will be (to the point where a clone of a C compiler is
just a couple copy-paste lines). However, it is not excessively hard to add
support for completely foreign compilers and bytecode/assembly formats.

As a minimum starting point, you must know how to compile a source file to
assembly or bytecode on the command line, and know how the line numbers are
available in the compiled form if they exist.

1. [[file:../rmsbolt.el::;;;;%20Language%20Definitions][Add a new entry to the language definitions statement.]]
   - To do this, you will need to (at a minimum) add a mode, compile-command, a
     compile-cmd-function, and a starter file name.
   - The compile-cmd-function is a function that will turn local variable
     settings into a valid command which will take in a filename and output
     assembly or an executable. See ~rmsbolt--c-compile-cmd~ for an example.
   - When building compilation commands, please make sure to use absolute paths,
     as the default-directory is not guaranteed to be stable.
   - If the assembly is not in a standard format, you will need to define a
     ~process-asm-custom-fn~ as well (see python/java for examples).
   - If you would like to add language tweaks in your own config (ie: take full
     control over what rmsbolt does completely), you can use
     ~rmsbolt-language-descriptor~ to fully override the defaults with a custom
     language definition.
2. [[file:../rmsbolt.el::;;;;;%20Starter%20Definitions][Add a new entry into the starter file]]
   - For this, you will need to make a starter file. See [[file:./../starters/][this folder]] for
     existing examples.
   - Ideally, try to pick something which is interesting to play with from an
     disassembly point of view.

You're done!
